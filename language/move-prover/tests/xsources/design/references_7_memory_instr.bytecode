============ after processor `memory_instr` ================

[variant baseline]
pub fun Trafo::incr_ref($t0|r: u64): u64 {
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t1 := move($t0)
  1: $t2 := borrow_local($t1)
  2: trace_local[r]($t2)
  3: $t3 := read_ref($t2)
  4: $t4 := 1
  5: $t5 := +($t3, $t4)
  6: write_ref($t2, $t5)
  7: write_back[LocalRoot($t1)]($t2)
  8: return $t1
}


[variant baseline]
pub fun Trafo::use_incr_ref($t0|b: bool): Trafo::R {
     var $t1|r1: Trafo::R
     var $t2|r2: Trafo::R
     var $t3|r_ref: &mut Trafo::R
     var $t4|tmp#$4: &mut Trafo::R
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: &mut Trafo::R
     var $t9: &mut Trafo::R
     var $t10: &mut u64
     var $t11: u64
  0: $t5 := move($t0)
  1: trace_local[b]($t5)
  2: $t6 := 1
  3: $t1 := pack Trafo::R($t6)
  4: trace_local[r1]($t1)
  5: $t7 := 2
  6: $t2 := pack Trafo::R($t7)
  7: trace_local[r2]($t2)
  8: if ($t5) goto 11 else goto 9
  9: label L1
 10: goto 17
 11: label L0
 12: $t8 := borrow_local($t1)
 13: $t4 := $t8
 14: write_back[LocalRoot($t1)]($t8)
 15: trace_local[tmp#$4]($t8)
 16: goto 22
 17: label L2
 18: $t9 := borrow_local($t2)
 19: $t4 := $t9
 20: write_back[LocalRoot($t2)]($t9)
 21: trace_local[tmp#$4]($t9)
 22: label L3
 23: $t3 := $t4
 24: write_back[LocalRoot($t1)]($t4)
 25: write_back[LocalRoot($t2)]($t4)
 26: trace_local[r_ref]($t3)
 27: $t10 := borrow_field<Trafo::R>.x($t3)
 28: $t11 := read_ref($t10)
 29: $t11 := Trafo::incr_ref($t11)
 30: write_ref($t10, $t11)
 31: write_back[Reference($t3)]($t10)
 32: write_back[LocalRoot($t1)]($t3)
 33: write_back[LocalRoot($t2)]($t3)
 34: trace_return[0]($t2)
 35: return $t2
}
