============ after processor `spec_instrumenter` ================

[variant baseline]
pub fun Trafo::incr_ref($t0|r: u64): u64 {
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: num
  0: $t1 := move($t0)
  1: $t2 := borrow_local($t1)
  2: trace_local[r]($t2)
  3: $t3 := read_ref($t2)
  4: $t4 := 1
  5: $t5 := +($t3, $t4)
  6: on_abort goto 11 with $t6
  7: write_ref($t2, $t5)
  8: write_back[LocalRoot($t1)]($t2)
  9: label L1
 10: return $t1
 11: label L2
 12: abort($t6)
}


[variant verification]
pub fun Trafo::incr_ref($t0|r: u64): u64 {
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: num
  0: $t1 := move($t0)
  1: $t2 := borrow_local($t1)
  2: trace_local[r]($t2)
  3: $t3 := read_ref($t2)
  4: $t4 := 1
  5: $t5 := +($t3, $t4)
  6: on_abort goto 12 with $t6
  7: write_ref($t2, $t5)
  8: write_back[LocalRoot($t1)]($t2)
  9: label L1
     # VC: `post-condition does not hold` at references.move:12:5+24
 10: assert Eq<u64>($t1, Add($t0, 1))
 11: return $t1
 12: label L2
 13: abort($t6)
}


[variant baseline]
pub fun Trafo::use_incr_ref($t0|b: bool): Trafo::R {
     var $t1|r1: Trafo::R
     var $t2|r2: Trafo::R
     var $t3|r_ref: &mut Trafo::R
     var $t4|tmp#$4: &mut Trafo::R
     var $t5: u64
     var $t6: u64
     var $t7: &mut Trafo::R
     var $t8: &mut Trafo::R
     var $t9: &mut u64
     var $t10: u64
     var $t11: num
  0: trace_local[b]($t0)
  1: $t5 := 1
  2: $t1 := pack Trafo::R($t5)
  3: trace_local[r1]($t1)
  4: $t6 := 2
  5: $t2 := pack Trafo::R($t6)
  6: trace_local[r2]($t2)
  7: if ($t0) goto 10 else goto 8
  8: label L1
  9: goto 15
 10: label L0
 11: $t7 := borrow_local($t1)
 12: $t4 := $t7
 13: trace_local[tmp#$4]($t7)
 14: goto 19
 15: label L2
 16: $t8 := borrow_local($t2)
 17: $t4 := $t8
 18: trace_local[tmp#$4]($t8)
 19: label L3
 20: $t3 := $t4
 21: trace_local[r_ref]($t3)
 22: $t9 := borrow_field<Trafo::R>.x($t3)
 23: $t10 := read_ref($t9)
 24: $t10 := Trafo::incr_ref($t10)
 25: on_abort goto 33 with $t11
 26: write_ref($t9, $t10)
 27: write_back[Reference($t3)]($t9)
 28: write_back[LocalRoot($t1)]($t3)
 29: write_back[LocalRoot($t2)]($t3)
 30: trace_return[0]($t2)
 31: label L4
 32: return $t2
 33: label L5
 34: abort($t11)
}


[variant verification]
pub fun Trafo::use_incr_ref($t0|b: bool): Trafo::R {
     var $t1|r1: Trafo::R
     var $t2|r2: Trafo::R
     var $t3|r_ref: &mut Trafo::R
     var $t4|tmp#$4: &mut Trafo::R
     var $t5: u64
     var $t6: u64
     var $t7: &mut Trafo::R
     var $t8: &mut Trafo::R
     var $t9: &mut u64
     var $t10: u64
     var $t11: num
  0: trace_local[b]($t0)
  1: $t5 := 1
  2: $t1 := pack Trafo::R($t5)
  3: trace_local[r1]($t1)
  4: $t6 := 2
  5: $t2 := pack Trafo::R($t6)
  6: trace_local[r2]($t2)
  7: if ($t0) goto 10 else goto 8
  8: label L1
  9: goto 15
 10: label L0
 11: $t7 := borrow_local($t1)
 12: $t4 := $t7
 13: trace_local[tmp#$4]($t7)
 14: goto 19
 15: label L2
 16: $t8 := borrow_local($t2)
 17: $t4 := $t8
 18: trace_local[tmp#$4]($t8)
 19: label L3
 20: $t3 := $t4
 21: trace_local[r_ref]($t3)
 22: $t9 := borrow_field<Trafo::R>.x($t3)
 23: $t10 := read_ref($t9)
 24: $t10 := Trafo::incr_ref($t10)
 25: on_abort goto 35 with $t11
 26: write_ref($t9, $t10)
 27: write_back[Reference($t3)]($t9)
 28: write_back[LocalRoot($t1)]($t3)
 29: write_back[LocalRoot($t2)]($t3)
 30: trace_return[0]($t2)
 31: label L4
     # VC: `post-condition does not hold` at references.move:23:7+31
 32: assert Implies($t0, Eq<Trafo::R>($t2, pack Trafo::R(2)))
     # VC: `post-condition does not hold` at references.move:24:7+32
 33: assert Implies(Not($t0), Eq<Trafo::R>($t2, pack Trafo::R(3)))
 34: return $t2
 35: label L5
 36: abort($t11)
}
