============ after processor `spec_instrumenter` ================

[variant baseline]
pub fun Signer::address_of($t0|s: signer): address {
     var $t1: address
     var $t2: num
  0: trace_local[s]($t0)
  1: $t1 := Signer::borrow_address($t0)
  2: on_abort goto 6 with $t2
  3: trace_return[0]($t1)
  4: label L1
  5: return $t1
  6: label L2
  7: abort($t2)
}


[variant baseline]
pub fun Signer::borrow_address($t0|s: signer): address {
}


[variant baseline]
pub fun Trafo::dummy_need_signer_use_in_move($t0|account: signer): address {
     var $t1: bool
     var $t2: address
     var $t3: num
  0: trace_local[account]($t0)
     # original call of opaque function: $t2 := Signer::address_of($t1)
  1: assume Eq($t1, false)
  2: if ($t1) goto 8 else goto 3
  3: label L3
  4: assume Eq<address>($t2, Signer::spec_address_of($t0))
  5: trace_return[0]($t2)
  6: label L1
  7: return $t2
  8: label L2
  9: abort($t3)
}


[variant verification]
pub fun Trafo::dummy_need_signer_use_in_move($t0|account: signer): address {
     var $t1: bool
     var $t2: address
     var $t3: num
  0: trace_local[account]($t0)
     # original call of opaque function: $t2 := Signer::address_of($t1)
  1: assume Eq($t1, false)
  2: if ($t1) goto 8 else goto 3
  3: label L3
  4: assume Eq<address>($t2, Signer::spec_address_of($t0))
  5: trace_return[0]($t2)
  6: label L1
  7: return $t2
  8: label L2
  9: abort($t3)
}


[variant baseline]
pub fun Trafo::publish($t0|account: signer, $t1|x: u64) {
     var $t2: Trafo::R
     var $t3: num
  0: trace_local[account]($t0)
  1: trace_local[x]($t1)
  2: $t2 := pack Trafo::R($t1)
  3: move_to<Trafo::R>($t2, $t0)
  4: on_abort goto 7 with $t3
  5: label L1
  6: return ()
  7: label L2
  8: abort($t3)
}


[variant verification]
pub fun Trafo::publish($t0|account: signer, $t1|x: u64) {
     var $t2: Trafo::R
     var $t3: num
  0: @0 := save_mem(Trafo::R)
  1: trace_local[account]($t0)
  2: trace_local[x]($t1)
  3: $t2 := pack Trafo::R($t1)
  4: move_to<Trafo::R>($t2, $t0)
  5: on_abort goto 11 with $t3
  6: label L1
     # VC: `function does not abort under this condition` at resource.move:14:7+26
  7: assert Not(exists[@0]<Trafo::R>(Trafo::addr$2[]($t0)))
     # VC: `post-condition does not hold` at resource.move:15:7+24
  8: assert exists<Trafo::R>(Trafo::addr$2($t0))
     # VC: `post-condition does not hold` at resource.move:16:7+31
  9: assert Eq<u64>(select Trafo::R.x(global<Trafo::R>(Trafo::addr$2($t0))), $t1)
 10: return ()
 11: label L2
     # VC: `abort not covered by any of the `aborts_if` clauses` at resource.move:9:3+85
 12: assert exists[@0]<Trafo::R>(Trafo::addr$2[]($t0))
 13: abort($t3)
}
