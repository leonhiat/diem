============ after processor `spec_instrumenter` ================

[variant baseline]
pub fun Trafo::opaque_caller($t0|x: u64): u64 {
     var $t1: bool
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: num
  0: trace_local[x]($t0)
     # original call of opaque function: $t2 := Trafo::opaque_decr($t1)
  1: assume Eq($t1, Eq<u64>($t0, 0))
  2: if ($t1) goto 12 else goto 3
  3: label L3
  4: assume Eq<u64>($t2, Sub($t0, 1))
     # original call of opaque function: $t3 := Trafo::opaque_decr($t2)
  5: assume Eq($t3, Eq<u64>($t2, 0))
  6: if ($t3) goto 12 else goto 7
  7: label L4
  8: assume Eq<u64>($t4, Sub($t2, 1))
  9: trace_return[0]($t4)
 10: label L1
 11: return $t4
 12: label L2
 13: abort($t5)
}


[variant verification]
pub fun Trafo::opaque_caller($t0|x: u64): u64 {
     var $t1: bool
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: num
  0: trace_local[x]($t0)
     # original call of opaque function: $t2 := Trafo::opaque_decr($t1)
  1: assume Eq($t1, Eq<u64>($t0, 0))
  2: if ($t1) goto 14 else goto 3
  3: label L3
  4: assume Eq<u64>($t2, Sub($t0, 1))
     # original call of opaque function: $t3 := Trafo::opaque_decr($t2)
  5: assume Eq($t3, Eq<u64>($t2, 0))
  6: if ($t3) goto 14 else goto 7
  7: label L4
  8: assume Eq<u64>($t4, Sub($t2, 1))
  9: trace_return[0]($t4)
 10: label L1
     # VC: `function does not abort under this condition` at opaque.move:18:7+16
 11: assert Not(Lt($t0, 2))
     # VC: `post-condition does not hold` at opaque.move:19:7+24
 12: assert Eq<u64>($t4, Sub($t0, 2))
 13: return $t4
 14: label L2
     # VC: `abort not covered by any of the `aborts_if` clauses` at opaque.move:14:3+77
 15: assert Lt($t0, 2)
 16: abort($t5)
}


[variant baseline]
pub fun Trafo::opaque_decr($t0|x: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: num
  0: trace_local[x]($t0)
  1: $t1 := 1
  2: $t2 := -($t0, $t1)
  3: on_abort goto 7 with $t3
  4: trace_return[0]($t2)
  5: label L1
  6: return $t2
  7: label L2
  8: abort($t3)
}


[variant verification]
pub fun Trafo::opaque_decr($t0|x: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: num
  0: trace_local[x]($t0)
  1: $t1 := 1
  2: $t2 := -($t0, $t1)
  3: on_abort goto 9 with $t3
  4: trace_return[0]($t2)
  5: label L1
     # VC: `function does not abort under this condition` at opaque.move:10:7+17
  6: assert Not(Eq<u64>($t0, 0))
     # VC: `post-condition does not hold` at opaque.move:11:7+24
  7: assert Eq<u64>($t2, Sub($t0, 1))
  8: return $t2
  9: label L2
     # VC: `abort not covered by any of the `aborts_if` clauses` at opaque.move:5:3+53
 10: assert Eq<u64>($t0, 0)
 11: abort($t3)
}
