============ initial translation from Move ================

[variant baseline]
fun Test::branching_result(is_div: bool, a: u64, b: u64): u64 {
     var tmp#$3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
  0: $t4 := copy(is_div)
  1: if ($t4) goto L0 else goto L1
  2: L1:
  3: goto L2
  4: L0:
  5: $t5 := copy(a)
  6: $t6 := copy(b)
  7: $t7 := /($t5, $t6)
  8: tmp#$3 := $t7
  9: goto L3
 10: L2:
 11: $t8 := copy(a)
 12: $t9 := copy(b)
 13: $t10 := *($t8, $t9)
 14: tmp#$3 := $t10
 15: goto L3
 16: L3:
 17: $t11 := move(tmp#$3)
 18: return $t11
}


[variant baseline]
fun Test::implicit_and_explicit_abort(a: u64, b: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t2 := copy(b)
  1: $t3 := 0
  2: $t4 := !=($t2, $t3)
  3: if ($t4) goto L0 else goto L1
  4: L1:
  5: goto L2
  6: L0:
  7: $t5 := 22
  8: abort($t5)
  9: L2:
 10: $t6 := copy(a)
 11: $t7 := copy(b)
 12: $t8 := /($t6, $t7)
 13: return $t8
}


[variant baseline]
fun Test::multiple_results(a: u64, b: u64): (u64, u64) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t2 := copy(a)
  1: $t3 := copy(b)
  2: $t4 := /($t2, $t3)
  3: $t5 := copy(a)
  4: $t6 := copy(b)
  5: $t7 := %($t5, $t6)
  6: return ($t4, $t7)
}


[variant baseline]
fun Test::mut_ref_param(r: &mut Test::R): u64 {
     var x: u64
     var $t2: &mut Test::R
     var $t3: &u64
     var $t4: u64
     var $t5: &mut Test::R
     var $t6: &u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: &mut Test::R
     var $t11: &mut u64
     var $t12: u64
  0: $t2 := copy(r)
  1: $t3 := borrow_field<Test::R>.v($t2)
  2: $t4 := read_ref($t3)
  3: x := $t4
  4: $t5 := copy(r)
  5: $t6 := borrow_field<Test::R>.v($t5)
  6: $t7 := read_ref($t6)
  7: $t8 := 1
  8: $t9 := -($t7, $t8)
  9: $t10 := move(r)
 10: $t11 := borrow_field<Test::R>.v($t10)
 11: write_ref($t11, $t9)
 12: $t12 := copy(x)
 13: return $t12
}


[variant baseline]
fun Test::ref_param(r: &Test::R): u64 {
     var $t1: &Test::R
     var $t2: &u64
     var $t3: u64
  0: $t1 := move(r)
  1: $t2 := borrow_field<Test::R>.v($t1)
  2: $t3 := read_ref($t2)
  3: return $t3
}


[variant baseline]
fun Test::ref_param_return_ref(r: &Test::R): &u64 {
     var $t1: &Test::R
     var $t2: &u64
  0: $t1 := move(r)
  1: $t2 := borrow_field<Test::R>.v($t1)
  2: return $t2
}


[variant baseline]
fun Test::resource_with_old(val: u64) {
     var r: &mut Test::R
     var $t2: address
     var $t3: bool
     var $t4: bool
     var $t5: u64
     var $t6: address
     var $t7: &mut Test::R
     var $t8: &mut Test::R
     var $t9: &u64
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: &mut Test::R
     var $t14: &mut u64
  0: $t2 := 0x0
  1: $t3 := exists<Test::R>($t2)
  2: $t4 := !($t3)
  3: if ($t4) goto L0 else goto L1
  4: L1:
  5: goto L2
  6: L0:
  7: $t5 := 33
  8: abort($t5)
  9: L2:
 10: $t6 := 0x0
 11: $t7 := borrow_global<Test::R>($t6)
 12: r := $t7
 13: $t8 := copy(r)
 14: $t9 := borrow_field<Test::R>.v($t8)
 15: $t10 := read_ref($t9)
 16: $t11 := copy(val)
 17: $t12 := +($t10, $t11)
 18: $t13 := move(r)
 19: $t14 := borrow_field<Test::R>.v($t13)
 20: write_ref($t14, $t12)
 21: return ()
}

============ after pipeline `spec_instrumentation` ================

[variant baseline]
fun Test::branching_result(is_div: bool, a: u64, b: u64): u64 {
     var tmp#$3: u64
     var $t4: num
  0: if (is_div) goto L0 else goto L1
  1: L1:
  2: goto L2
  3: L0:
  4: tmp#$3 := /(a, b)
  5: on_abort(L5, $t4)
  6: goto L3
  7: L2:
  8: tmp#$3 := *(a, b)
  9: on_abort(L5, $t4)
 10: L3:
 11: L4:
 12: return tmp#$3
 13: L5:
 14: abort($t4)
}


[variant verification]
fun Test::branching_result(is_div: bool, a: u64, b: u64): u64 {
     var tmp#$3: u64
     var $t4: num
  0: if (is_div) goto L0 else goto L1
  1: L1:
  2: goto L2
  3: L0:
  4: tmp#$3 := /(a, b)
  5: on_abort(L5, $t4)
  6: goto L3
  7: L2:
  8: tmp#$3 := *(a, b)
  9: on_abort(L5, $t4)
 10: L3:
 11: L4:
     // VC: `function does not abort under this condition` for ensures
 12: assert Not(And(is_div, Eq(b, 0)))
     // VC: `post-condition does not hold` for ensures
 13: assert Implies(is_div, Eq(tmp#$3, Div(a, b)))
     // VC: `post-condition does not hold` for ensures
 14: assert Implies(Not(is_div), Eq(tmp#$3, Mul(a, b)))
 15: return tmp#$3
 16: L5:
     // VC: `abort not covered by any of the `aborts_if` clauses` for ensures
 17: assert And(is_div, Eq(b, 0))
     // VC: `function aborts under this condition but with the wrong code` for ensures
 18: assert Implies(And(is_div, Eq(b, 0)), Eq($t4, -1))
 19: abort($t4)
}


[variant baseline]
fun Test::implicit_and_explicit_abort(a: u64, b: u64): u64 {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: num
     var $t6: u64
  0: $t2 := 0
  1: $t3 := !=(b, $t2)
  2: if ($t3) goto L0 else goto L1
  3: L1:
  4: goto L2
  5: L0:
  6: $t4 := 22
  7: $t5 := move($t4)
  8: goto L4
  9: L2:
 10: $t6 := /(a, b)
 11: on_abort(L4, $t5)
 12: L3:
 13: return $t6
 14: L4:
 15: abort($t5)
}


[variant verification]
fun Test::implicit_and_explicit_abort(a: u64, b: u64): u64 {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: num
     var $t6: u64
  0: $t2 := 0
  1: $t3 := !=(b, $t2)
  2: if ($t3) goto L0 else goto L1
  3: L1:
  4: goto L2
  5: L0:
  6: $t4 := 22
  7: $t5 := move($t4)
  8: goto L4
  9: L2:
 10: $t6 := /(a, b)
 11: on_abort(L4, $t5)
 12: L3:
     // VC: `function does not abort under this condition` for ensures
 13: assert Not(Eq(b, 0))
     // VC: `function does not abort under this condition` for ensures
 14: assert Not(Eq(a, 0))
     // VC: `post-condition does not hold` for ensures
 15: assert Eq($t6, Div(a, b))
 16: return $t6
 17: L4:
     // VC: `abort not covered by any of the `aborts_if` clauses` for ensures
 18: assert Or(Eq(b, 0), Eq(a, 0))
     // VC: `function aborts under this condition but with the wrong code` for ensures
 19: assert Implies(Eq(b, 0), Eq($t5, 22))
 20: abort($t5)
}


[variant baseline]
fun Test::multiple_results(a: u64, b: u64): (u64, u64) {
     var $t2: u64
     var $t3: num
     var $t4: u64
  0: $t2 := /(a, b)
  1: on_abort(L2, $t3)
  2: $t4 := %(a, b)
  3: on_abort(L2, $t3)
  4: L1:
  5: return ($t2, $t4)
  6: L2:
  7: abort($t3)
}


[variant verification]
fun Test::multiple_results(a: u64, b: u64): (u64, u64) {
     var $t2: u64
     var $t3: num
     var $t4: u64
  0: $t2 := /(a, b)
  1: on_abort(L2, $t3)
  2: $t4 := %(a, b)
  3: on_abort(L2, $t3)
  4: L1:
     // VC: `function does not abort under this condition` for ensures
  5: assert Not(Eq(b, 0))
     // VC: `post-condition does not hold` for ensures
  6: assert Eq($t2, Div(a, b))
     // VC: `post-condition does not hold` for ensures
  7: assert Eq($t4, Mod(a, b))
  8: return ($t2, $t4)
  9: L2:
     // VC: `abort not covered by any of the `aborts_if` clauses` for ensures
 10: assert Eq(b, 0)
     // VC: `function aborts under this condition but with the wrong code` for ensures
 11: assert Implies(Eq(b, 0), Eq($t3, -1))
 12: abort($t3)
}


[variant baseline]
fun Test::mut_ref_param(r: Test::R): (u64, Test::R) {
     var x: u64
     var $t2: Test::R
     var $t3: &mut Test::R
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: num
     var $t9: &mut u64
  0: $t2 := move(r)
  1: $t3 := borrow_local(r)
  2: $t4 := get_field<Test::R>.v($t3)
  3: $t5 := get_field<Test::R>.v($t3)
  4: $t6 := 1
  5: $t7 := -($t5, $t6)
  6: on_abort(L2, $t8)
  7: $t9 := borrow_field<Test::R>.v($t3)
  8: write_ref($t9, $t7)
  9: write_back[Reference($t3)]($t9)
 10: write_back[LocalRoot(r)]($t3)
 11: L1:
 12: return ($t4, $t2)
 13: L2:
 14: abort($t8)
}


[variant verification]
fun Test::mut_ref_param(r: Test::R): (u64, Test::R) {
     var x: u64
     var $t2: Test::R
     var $t3: &mut Test::R
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: num
     var $t9: &mut u64
  0: $t2 := move(r)
  1: $t3 := borrow_local(r)
  2: $t4 := get_field<Test::R>.v($t3)
  3: $t5 := get_field<Test::R>.v($t3)
  4: $t6 := 1
  5: $t7 := -($t5, $t6)
  6: on_abort(L2, $t8)
  7: $t9 := borrow_field<Test::R>.v($t3)
  8: write_ref($t9, $t7)
  9: write_back[Reference($t3)]($t9)
 10: write_back[LocalRoot(r)]($t3)
 11: L1:
     // VC: `function does not abort under this condition` for ensures
 12: assert Not(Eq(select Test::R.v(r), 0))
     // VC: `post-condition does not hold` for ensures
 13: assert Eq($t4, select Test::R.v(r))
     // VC: `post-condition does not hold` for ensures
 14: assert Eq(select Test::R.v($t2), Add(select Test::R.v(r), 1))
 15: return ($t4, $t2)
 16: L2:
     // VC: `abort not covered by any of the `aborts_if` clauses` for ensures
 17: assert Eq(select Test::R.v(r), 0)
     // VC: `function aborts under this condition but with the wrong code` for ensures
 18: assert Implies(Eq(select Test::R.v(r), 0), Eq($t8, -1))
 19: abort($t8)
}


[variant baseline]
fun Test::ref_param(r: Test::R): u64 {
     var $t1: u64
  0: $t1 := get_field<Test::R>.v(r)
  1: L1:
  2: return $t1
}


[variant verification]
fun Test::ref_param(r: Test::R): u64 {
     var $t1: u64
  0: $t1 := get_field<Test::R>.v(r)
  1: L1:
     // VC: `post-condition does not hold` for ensures
  2: assert Eq($t1, select Test::R.v(r))
  3: return $t1
}


[variant baseline]
fun Test::ref_param_return_ref(r: Test::R): u64 {
     var $t1: u64
  0: $t1 := get_field<Test::R>.v(r)
  1: L1:
  2: return $t1
}


[variant verification]
fun Test::ref_param_return_ref(r: Test::R): u64 {
     var $t1: u64
  0: $t1 := get_field<Test::R>.v(r)
  1: L1:
     // VC: `post-condition does not hold` for ensures
  2: assert Eq($t1, select Test::R.v(r))
  3: return $t1
}


[variant baseline]
fun Test::resource_with_old(val: u64) {
     var r: &mut Test::R
     var $t2: address
     var $t3: bool
     var $t4: bool
     var $t5: u64
     var $t6: num
     var $t7: address
     var $t8: u64
     var $t9: u64
     var $t10: &mut u64
  0: assume Gt(val, 0)
  1: $t2 := 0x0
  2: $t3 := exists<Test::R>($t2)
  3: $t4 := !($t3)
  4: if ($t4) goto L0 else goto L1
  5: L1:
  6: goto L2
  7: L0:
  8: $t5 := 33
  9: $t6 := move($t5)
 10: goto L4
 11: L2:
 12: $t7 := 0x0
 13: r := borrow_global<Test::R>($t7)
 14: on_abort(L4, $t6)
 15: unpack_ref(r)
 16: $t8 := get_field<Test::R>.v(r)
 17: $t9 := +($t8, val)
 18: on_abort(L4, $t6)
 19: $t10 := borrow_field<Test::R>.v(r)
 20: unpack_ref($t10)
 21: write_ref($t10, $t9)
 22: pack_ref($t10)
 23: write_back[Reference(r)]($t10)
 24: pack_ref(r)
 25: write_back[Test::R](r)
 26: L3:
 27: return ()
 28: L4:
 29: abort($t6)
}


[variant verification]
fun Test::resource_with_old(val: u64) {
     var r: &mut Test::R
     var $t2: address
     var $t3: bool
     var $t4: bool
     var $t5: u64
     var $t6: num
     var $t7: address
     var $t8: u64
     var $t9: u64
     var $t10: &mut u64
  0: assume Gt(val, 0)
  1: @0 := save_mem(Test::R)
  2: $t2 := 0x0
  3: $t3 := exists<Test::R>($t2)
  4: $t4 := !($t3)
  5: if ($t4) goto L0 else goto L1
  6: L1:
  7: goto L2
  8: L0:
  9: $t5 := 33
 10: $t6 := move($t5)
 11: goto L4
 12: L2:
 13: $t7 := 0x0
 14: r := borrow_global<Test::R>($t7)
 15: on_abort(L4, $t6)
 16: unpack_ref(r)
 17: $t8 := get_field<Test::R>.v(r)
 18: $t9 := +($t8, val)
 19: on_abort(L4, $t6)
 20: $t10 := borrow_field<Test::R>.v(r)
 21: unpack_ref($t10)
 22: write_ref($t10, $t9)
 23: pack_ref($t10)
 24: write_back[Reference(r)]($t10)
 25: pack_ref(r)
 26: write_back[Test::R](r)
 27: L3:
     // VC: `function does not abort under this condition` for ensures
 28: assert Not(Not(exists<Test::R>[@0](0)))
     // VC: `function does not abort under this condition` for ensures
 29: assert Not(Ge(Add(select Test::R.v(global<Test::R>[@0](0)), val), 18446744073709551615))
     // VC: `post-condition does not hold` for ensures
 30: assert Eq(select Test::R.v(global<Test::R>(0)), Add(select Test::R.v(global<Test::R>[@0](0)), val))
 31: return ()
 32: L4:
     // VC: `abort not covered by any of the `aborts_if` clauses` for ensures
 33: assert Or(Not(exists<Test::R>[@0](0)), Ge(Add(select Test::R.v(global<Test::R>[@0](0)), val), 18446744073709551615))
     // VC: `function aborts under this condition but with the wrong code` for ensures
 34: assert Implies(Not(exists<Test::R>[@0](0)), Eq($t6, 33))
 35: abort($t6)
}
