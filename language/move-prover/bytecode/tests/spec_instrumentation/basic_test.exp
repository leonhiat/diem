============ initial translation from Move ================

[variant baseline]
fun Test::increment_R(val: u64) {
     var r: &mut Test::R
     var $t2: address
     var $t3: &mut Test::R
     var $t4: &mut Test::R
     var $t5: &u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: &mut Test::R
     var $t10: &mut u64
  0: $t2 := 0x0
  1: $t3 := borrow_global<Test::R>($t2)
  2: r := $t3
  3: $t4 := copy(r)
  4: $t5 := borrow_field<Test::R>.v($t4)
  5: $t6 := read_ref($t5)
  6: $t7 := copy(val)
  7: $t8 := +($t6, $t7)
  8: $t9 := move(r)
  9: $t10 := borrow_field<Test::R>.v($t9)
 10: write_ref($t10, $t8)
 11: return ()
}


[variant baseline]
fun Test::limited_div(a: u64, b: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: $t2 := copy(a)
  1: $t3 := copy(b)
  2: $t4 := /($t2, $t3)
  3: return $t4
}

============ after pipeline `spec_instrumentation` ================

[variant baseline]
fun Test::increment_R(val: u64) {
     var r: &mut Test::R
     var $t2: u64
     var $t3: address
     var $t4: u64
     var $t5: u64
     var $t6: &mut u64
  0: assume Gt(val, 0)
  1: @0 := save_mem(Test::R)
  2: $t2 := move(val)
  3: $t3 := 0x0
  4: r := borrow_global<Test::R>($t3)
  5: unpack_ref(r)
  6: $t4 := get_field<Test::R>.v(r)
  7: $t5 := +($t4, $t2)
  8: $t6 := borrow_field<Test::R>.v(r)
  9: unpack_ref($t6)
 10: write_ref($t6, $t5)
 11: pack_ref($t6)
 12: write_back[Reference(r)]($t6)
 13: pack_ref(r)
 14: write_back[Test::R](r)
 15: assert Implies(Not(exists<Test::R>[@0](0)), AbortFlag())
 16: assert Implies(Ge(Add(select Test::R.v(global<Test::R>[@0](0)), val), 18446744073709551615), AbortFlag())
 17: assert Implies(AbortFlag(), Or(Not(exists<Test::R>[@0](0)), Ge(Add(select Test::R.v(global<Test::R>[@0](0)), val), 18446744073709551615)))
 18: assert Eq(select Test::R.v(global<Test::R>(0)), Add(select Test::R.v(global<Test::R>[@0](0)), val))
 19: return ()
}


[variant baseline]
fun Test::limited_div(a: u64, b: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: assume Lt(a, 100)
  1: $t2 := move(a)
  2: $t3 := move(b)
  3: $t4 := /($t2, $t3)
  4: assert Implies(Eq(b, 0), AbortFlag())
  5: assert Implies(Eq(a, 0), AbortFlag())
  6: assert Implies(AbortFlag(), Or(Eq(b, 0), Eq(a, 0)))
  7: assert Eq(result0(), Div(a, b))
  8: return $t4
}
