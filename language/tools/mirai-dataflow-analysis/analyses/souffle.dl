// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0
// ================================================


// Types
// Unique edge identifier
.type EdgeID = number
// Unique node identifier
.type NodeID = number
// Unique Rust type identifier
.type TypeID = number
// The (annotated) kind of a node
// 0 -> entry
// 1 -> checker
// 2 -> exit
.type Nkind = number


// A node may be marked as an entry, an exit, or a checker
.decl NodeType(id: NodeID, nkind: Nkind)
.input NodeType(IO=file, delimiter=",")


// An edge connects two nodes and has a Rust type (rtype)
.decl Edge(id: EdgeID, node1: NodeID, node2: NodeID)
.input Edge(IO=file, delimiter=",")

.decl EdgeType(id: EdgeID, rtype: TypeID)
.input EdgeType(IO=file, delimiter=",")


// In the control flow graph, node1 dominates node2
.decl Dom(node1: NodeID, node2: NodeID)
.input Dom(IO=file, delimiter=",")


// Encodes that the type rtype2 is a member of type rtype1
.decl Member(rtype1: TypeID, rtype2: TypeID)
.input Member(IO=file, delimiter=",")


// Encodes that rtype1 is equivalent to rtype1
// (for the purpose of this analysis)
.decl EqType(rtype1: TypeID, rtype2: TypeID)
.input EqType(IO=file, delimiter=",")


// A valid node is connected to the graph
.decl ValidNode(node: NodeID)
ValidNode(node) :- Edge(_, node, _).
ValidNode(node) :- Edge(_, _, node).


// Not the same node
// Node identifiers do not match
.decl NotEqual(node1: NodeID, node2: NodeID)
NotEqual(node1, node2) :- ValidNode(node1), ValidNode(node2), (node1 != node2).
NotEqual(node2, node1) :- NotEqual(node1, node2).


// Valid type
// A valid type is associated with some edge in the graph.
.decl ValidType(rtype: TypeID)
ValidType(rtype) :- EdgeType(_, rtype).


// Type equality
// Encodes that rtype1 and rtype2 either
//   a. Known to be equal
//   b. Nominally equal
.decl TypeEquality(rtype1: TypeID, rtype2: TypeID)
TypeEquality(rtype1, rtype2) :- ValidType(rtype1), ValidType(rtype2), rtype1 = rtype2.
TypeEquality(rtype1, rtype2) :- EqType(rtype1, rtype2).
TypeEquality(rtype1, rtype2) :- EqType(rtype2, rtype1).


// Transitive type member (includes type equality)
// Encodes that rtype2 is a (transitive) member of rtype1
.decl MemberTrans(rtype1: TypeID, rtype2: TypeID)
MemberTrans(rtype1, rtype2) :- TypeEquality(rtype1, rtype2).
MemberTrans(rtype1, rtype2) :- Member(rtype1, rtype2).
MemberTrans(rtype1, rtype3) :- Member(rtype1, rtype2), MemberTrans(rtype2, rtype3).


// Typed caller (non-transitive)
// node1 is a caller of node2 at type t if there is an edge from node1
// to node2 that is of type t' where t' == t or t is a member of t'.
.decl TypedCallerNT(node1: NodeID, node2: NodeID, t: TypeID)
TypedCallerNT(node1, node2, t2) :- Edge(id, node1, node2), EdgeType(id, t), MemberTrans(t, t2).


// Typed caller
// A caller, node1, can be typed at t if
//   a. node1 calls node2 with an argument of type t
//   b. node1 calls a sequence of nodes with arguments whose types are members
//      of t up to the call to node2
.decl TypedCaller(node1: NodeID, node2: NodeID, t: NodeID)
TypedCaller(node1, node2, t) :- TypedCallerNT(node1, node2, t).
TypedCaller(node1, node3, t) :- TypedCallerNT(node1, node2, t), TypedCaller(node2, node3, t).


// Dominates with typing (non-transitive)
// node1 dominates node2 at type t if:
//      node1 dominates node2
// and
//      node1 can be typed at t2,
//      node2 can be typed at t3,
//      and t is a member of both t2 and t3.
// Note that node1 and node2 must share some parent node.
.decl TypedDominatesNT(node1: NodeID, node2: NodeID, t: TypeID)
TypedDominatesNT(node1, node2, t) :- Dom(node1, node2), Edge(id1, parent, node1), Edge(id2, parent, node2),
                                    EdgeType(id1, t2), EdgeType(id2, t3), MemberTrans(t2, t), MemberTrans(t3, t).


// Transitive dominance with typing
// Given node1, node2, and type t, either
//  a. node1 non-transitively dominates node2 at type t
//  b. node2 is a callee of some node that is dominated by node1 at type t.
//     (This case is a heuristic that should be obviated with precise dominance information.)
.decl TypedDominates(node1: NodeID, node2: NodeID, t: TypeID)
TypedDominates(node1, node2, t) :- TypedDominatesNT(node1, node2, t).
TypedDominates(node1, node3, t) :- TypedDominatesNT(node1, node2, t), TypedDominates(node2, node3, t).
TypedDominates(node1, node2, t) :- TypedCaller(parent, node1, t), TypedDominates(parent, node2, t).


// Typed dataflow model (non-transitive)
// Data flows from node1 to node2:
//      a. if node1 directly calls node2 at type t
//      b. if node1 directly dominates node2 at type t
.decl TypedDataflowNT(node1: NodeID, node2: NodeID, t: TypeID)
TypedDataflowNT(node1, node2, t) :- TypedCallerNT(node1, node2, t).
TypedDataflowNT(node1, node2, t) :- TypedDominatesNT(node1, node2, t).


// Typed dataflow model
// Data of type t flows from node1 to node2
//      a. if node1 transitively calls node2 at type t
//      b. if node1 transitively dominates node2 at type t
//      c. if there transitively is a dataflow at type t
//      d. if there is a dataflow of type t1 and t is a member of t1
.decl TypedDataflow(node1: NodeID, node2: NodeID, t: TypeID)
TypedDataflow(node1, node2, t) :- TypedCaller(node1, node2, t).
TypedDataflow(node1, node2, t) :- TypedDominates(node1, node2, t).
TypedDataflow(node1, node3, t) :- TypedDataflow(node1, node2, t), TypedDataflow(node2, node3, t).
TypedDataflow(node1, node2, t2) :- MemberTrans(t1, t2), TypedDataflow(node1, node2, t1).

// Typed dataflow via
// There exists a dataflow from node1 to node3 that passes through node2
// that can be typed at t.
.decl TypedDataflowVia(node1: NodeID, node2: NodeID, node3: NodeID, t: TypeID)
TypedDataflowVia(node1, node2, node3, t) :- TypedDataflow(node1, node2, t), NotEqual(node1, node2),
                                            TypedDataflow(node2, node3, t), NotEqual(node2, node3).


// Typed dataflow not via
// There exists a dataflow of type t from node1 to node3 that does not pass through node2.
//
// a. There is a non-transitive dataflow of type t from node1 to node3.
// b. There is a dataflow of type t from node1 to node3 that passes through some node4 != node2.
//    Since there is no dataflow of type t from node2 to node4, node2 cannot be in that same flow.
//
// This is not guaranteed if an over-approximation of the call graph is used.
.decl TypedDataflowNotVia(node1: NodeID, node2: NodeID, node3: NodeID, t: TypeID)
// TypedDataflowNotVia(node1, node2, node3, t) :- NotEqual(node1, node2), NotEqual(node2, node3),
//                                                 TypedDataflowNT(node1, node3, t).
TypedDataflowNotVia(node1, node2, node3, t) :- NotEqual(node1, node2), NotEqual(node2, node3),
                                                TypedDataflowVia(node1, node4, node3, t), NotEqual(node2, node4),
                                                !TypedDataflow(node4, node2, t).


// Checked type
// All dataflow of type t are pass through the checker
// There does not exist a dataflow of type t that does not pass through the checker
.decl CheckedType(t: TypeID)
CheckedType(t) :- ValidType(t), NodeType(entry, 0), NodeType(checker, 1), NodeType(exit, 2),
    TypedDataflowVia(entry, checker, exit, t),
    !TypedDataflowNotVia(entry, checker, exit, t).


// Not checked type
// There exists a dataflow of type t that does not pass through the checker
.decl NotCheckedType(t: TypeID)
NotCheckedType(t) :- ValidType(t), !CheckedType(t).


.output CheckedType(io=file, headers=true, delimiter=",")
.output NotCheckedType(io=file, headers=true, delimiter=",")
