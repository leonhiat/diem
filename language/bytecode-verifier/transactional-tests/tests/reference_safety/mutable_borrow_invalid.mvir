//# publish --address 0x1
module M {
    struct S { f: u64, g: u64, h: u64 }


    t1(root: &mut Self.S, cond: bool) {
        let x: &mut u64;

        if (move(cond)) {
            x = &mut copy(root).f;
        } else {
            x = &mut copy(root).g;
        }

        // INVALID x is still borrowing f
        *(&mut copy(root).f) = 1;

        return;
    }
}

//# publish --address 0x1
module M2 {

    struct S { f: u64, g: u64, h: u64 }

    t2(root: &mut Self.S, cond: bool) {
        let x: &mut u64;

        if (move(cond)) {
            x = &mut copy(root).f;
        } else {
            x = &mut copy(root).g;
        }

        // INVALID x and &mut root.f overlap
        Self.foo(move(x), &mut copy(root).f);

        return;
    }

    foo(x: &mut u64, y: &mut u64) {
        return;
    }
}
