module M {
    import 0x1.Coin1;
    import 0x1.Libra;
    import 0x1.Signer;
    resource Foo<T: resource> { x: T }
    resource CoinWrapper { f: Self.Foo<Libra.Libra<Coin1.Coin1>> }
    resource InnerWrapper { f: Self.Foo<Self.Inner>}
    resource Inner { b: vector<u8> }


    public coin_wrapper(account: &signer, c: Libra.Libra<Coin1.Coin1>) {
        let foo: Self.Foo<Libra.Libra<Coin1.Coin1>>;
        let coin_wrapper: Self.CoinWrapper;

        foo = Foo<Libra.Libra<Coin1.Coin1>> {x: move(c)};
        coin_wrapper = CoinWrapper {f: move(foo)};
        move_to<CoinWrapper>(move(account), move(coin_wrapper));
        return;
    }

    public inner_wrapper(account: &signer, b: vector<u8>) {
        let foo: Self.Foo<Self.Inner>;
        let inner_wrapper: Self.InnerWrapper;
        let inner: Self.Inner;

        inner = Inner { b: move(b) };
        foo = Foo<Self.Inner> {x: move(inner)};
        inner_wrapper = InnerWrapper {f: move(foo)};
        move_to<InnerWrapper>(move(account), move(inner_wrapper));
        return;
    }

    public get_coin_value(account: &signer): u64 acquires CoinWrapper {
        let sender: address;
        let coin_wrapper_ref: &Self.CoinWrapper;
        let foo_ref: &Self.Foo<Libra.Libra<Coin1.Coin1>>;
        let coin_ref: &Libra.Libra<Coin1.Coin1>;

        sender = Signer.address_of(copy(account));
        coin_wrapper_ref = borrow_global<CoinWrapper>(move(sender));
        foo_ref = &move(coin_wrapper_ref).f;
        coin_ref = &move(foo_ref).x;

        return Libra.value<Coin1.Coin1>(move(coin_ref));
    }

    public get_inner(account: &signer): vector<u8> acquires InnerWrapper {
        let sender: address;
        let inner_wrapper_ref: &Self.InnerWrapper;
        let foo_ref: &Self.Foo<Self.Inner>;
        let inner_ref: &Self.Inner;

        sender = Signer.address_of(copy(account));
        inner_wrapper_ref = borrow_global<InnerWrapper>(move(sender));
        foo_ref = &move(inner_wrapper_ref).f;
        inner_ref = &move(foo_ref).x;

        return *(&move(inner_ref).b);
    }


    public destroy(account: &signer): Libra.Libra<Coin1.Coin1> acquires CoinWrapper {
        let sender: address;
        let coin_wrapper: Self.CoinWrapper;
        let f: Self.Foo<Libra.Libra<Coin1.Coin1>>;
        let x: Libra.Libra<Coin1.Coin1>;

        sender = Signer.address_of(copy(account));
        coin_wrapper = move_from<CoinWrapper>(move(sender));
        CoinWrapper {f} = move(coin_wrapper);
        Foo<Libra.Libra<Coin1.Coin1>> {x} = move(f);
        return move(x);
    }
}

//! new-transaction
import {{default}}.M;
import 0x1.Coin1;
import 0x1.Libra;

main(account: &signer) {
  let coin: Libra.Libra<Coin1.Coin1>;
  let byte: vector<u8>;

  byte = h"bac1ac";
  coin = Libra.zero<Coin1.Coin1>();

  M.coin_wrapper(copy(account), move(coin));
  M.inner_wrapper(copy(account), move(byte));

  return;
}
// check: "Keep(EXECUTED)"

//! new-transaction
import {{default}}.M;
import 0x1.Coin1;
import 0x1.Libra;

main(account: &signer) {
  let coin: Libra.Libra<Coin1.Coin1>;
  let byte: vector<u8>;

  byte = h"bac1ac";
  assert(M.get_coin_value(copy(account)) == 0, 4);
  assert(M.get_inner(move(account)) == move(byte), 4);
  return;
}
// check: "Keep(EXECUTED)"

//! new-transaction
import {{default}}.M;
import 0x1.Coin1;
import 0x1.Libra;

main(account: &signer) {
  let coin: Libra.Libra<Coin1.Coin1>;
  coin = M.destroy(copy(account));
  Libra.destroy_zero<Coin1.Coin1>(move(coin));
  return;
}
// check: "Keep(EXECUTED)"
