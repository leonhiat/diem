error: 

   ┌── tests/move_check/locals/unused_resource.move:5:13 ───
   │
 5 │         let r = R{};
   │             ^ Unused assignment or binding for local 'r'. Consider removing, replacing with '_', or prefixing with '_' (e.g., '_r')
   │

error: 

   ┌── tests/move_check/locals/unused_resource.move:5:20 ───
   │
 5 │         let r = R{};
   │                    ^ Invalid return
   ·
 5 │         let r = R{};
   │             - The local 'r' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
   ·
 5 │         let r = R{};
   │                 --- The type '0x8675309::M::R' does not have the ability 'drop'
   ·
 2 │     struct R {}
   │            - To satisfy the constraint, the 'drop' ability would need to be added here
   │

error: 

    ┌── tests/move_check/locals/unused_resource.move:10:21 ───
    │
 10 │         let _r = R{};
    │                     ^ Invalid return
    ·
 10 │         let _r = R{};
    │             -- The local '_r' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
    ·
 10 │         let _r = R{};
    │                  --- The type '0x8675309::M::R' does not have the ability 'drop'
    ·
  2 │     struct R {}
    │            - To satisfy the constraint, the 'drop' ability would need to be added here
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:15:21 ───
    │
 15 │         if (cond) { r = R{}; };
    │                     ^ Unused assignment or binding for local 'r'. Consider removing, replacing with '_', or prefixing with '_' (e.g., '_r')
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:15:31 ───
    │
 15 │         if (cond) { r = R{}; };
    │                               ^ Invalid return
    ·
 15 │         if (cond) { r = R{}; };
    │                     - The local 'r' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
    ·
 15 │         if (cond) { r = R{}; };
    │                         --- The type '0x8675309::M::R' does not have the ability 'drop'
    ·
  2 │     struct R {}
    │            - To satisfy the constraint, the 'drop' ability would need to be added here
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:20:29 ───
    │
 20 │         if (cond) {} else { r = R{}; };
    │                             ^ Unused assignment or binding for local 'r'. Consider removing, replacing with '_', or prefixing with '_' (e.g., '_r')
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:20:39 ───
    │
 20 │         if (cond) {} else { r = R{}; };
    │                                       ^ Invalid return
    ·
 20 │         if (cond) {} else { r = R{}; };
    │                             - The local 'r' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
    ·
 20 │         if (cond) {} else { r = R{}; };
    │                                 --- The type '0x8675309::M::R' does not have the ability 'drop'
    ·
  2 │     struct R {}
    │            - To satisfy the constraint, the 'drop' ability would need to be added here
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:25:24 ───
    │
 25 │         while (cond) { r = R{} };
    │                        ^ Unused assignment or binding for local 'r'. Consider removing, replacing with '_', or prefixing with '_' (e.g., '_r')
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:25:24 ───
    │
 25 │         while (cond) { r = R{} };
    │                        ^ Invalid assignment to local 'r'
    ·
 25 │         while (cond) { r = R{} };
    │                        - The local might contain a value due to this assignment. The value does not have the 'drop' ability and must be used before you assign to this local again
    ·
 25 │         while (cond) { r = R{} };
    │                            --- The type '0x8675309::M::R' does not have the ability 'drop'
    ·
  2 │     struct R {}
    │            - To satisfy the constraint, the 'drop' ability would need to be added here
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:25:33 ───
    │
 25 │         while (cond) { r = R{} };
    │                                 ^ Invalid return
    ·
 25 │         while (cond) { r = R{} };
    │                        - The local 'r' might still contain a value. The value does not have the 'drop' ability and must be consumed before the function returns
    ·
 25 │         while (cond) { r = R{} };
    │                            --- The type '0x8675309::M::R' does not have the ability 'drop'
    ·
  2 │     struct R {}
    │            - To satisfy the constraint, the 'drop' ability would need to be added here
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:29:20 ───
    │
 29 │         loop { let r = R{}; }
    │                    ^ Unused assignment or binding for local 'r'. Consider removing, replacing with '_', or prefixing with '_' (e.g., '_r')
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:29:20 ───
    │
 29 │         loop { let r = R{}; }
    │                    ^ Invalid assignment to local 'r'
    ·
 29 │         loop { let r = R{}; }
    │                    - The local might contain a value due to this assignment. The value does not have the 'drop' ability and must be used before you assign to this local again
    ·
 29 │         loop { let r = R{}; }
    │                        --- The type '0x8675309::M::R' does not have the ability 'drop'
    ·
  2 │     struct R {}
    │            - To satisfy the constraint, the 'drop' ability would need to be added here
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:33:21 ───
    │
 33 │         let _ = &R{};
    │                     ^ Invalid return
    ·
 33 │         let _ = &R{};
    │                  --- The value is created but not used. The value does not have the 'drop' ability and must be consumed before the function returns
    ·
 33 │         let _ = &R{};
    │                  --- The type '0x8675309::M::R' does not have the ability 'drop'
    ·
  2 │     struct R {}
    │            - To satisfy the constraint, the 'drop' ability would need to be added here
    │

error: 

    ┌── tests/move_check/locals/unused_resource.move:36:22 ───
    │
 36 │       fun t7<T>(_x: R) {
    │ ╭──────────────────────^
 37 │ │     }
    │ ╰─────^ Invalid return
    ·
 36 │     fun t7<T>(_x: R) {
    │               -- The parameter '_x' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
    ·
 36 │     fun t7<T>(_x: R) {
    │                   - The type '0x8675309::M::R' does not have the ability 'drop'
    ·
  2 │     struct R {}
    │            - To satisfy the constraint, the 'drop' ability would need to be added here
    │

